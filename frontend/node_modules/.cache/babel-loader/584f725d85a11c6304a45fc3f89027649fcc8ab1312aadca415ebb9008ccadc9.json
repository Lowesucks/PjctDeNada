{"ast":null,"code":"import axios from 'axios';\n\n// Configuraci칩n de API que detecta autom치ticamente el entorno\nconst getApiBaseUrl = () => {\n  // Si estamos en el navegador\n  if (typeof window !== 'undefined') {\n    const hostname = window.location.hostname;\n    const protocol = window.location.protocol;\n    const port = '5000'; // Puerto del backend\n\n    // Si accedemos desde localhost, usar localhost para el backend\n    if (hostname === 'localhost' || hostname === '127.0.0.1') {\n      return `${protocol}//localhost:${port}`;\n    }\n\n    // Si accedemos desde IP local, usar la misma IP para el backend\n    if (hostname.match(/^192\\.168\\.|^10\\.|^172\\./)) {\n      return `${protocol}//${hostname}:${port}`;\n    }\n\n    // Fallback a localhost\n    return `${protocol}//localhost:${port}`;\n  }\n\n  // Fallback para desarrollo\n  return 'https://localhost:5000';\n};\n\n// Configurar la URL base de la API\naxios.defaults.baseURL = getApiBaseUrl();\n\n// Interceptor para manejar errores de conexi칩n\naxios.interceptors.request.use(config => {\n  // Log de la URL que se est치 usando (solo en desarrollo)\n  if (process.env.NODE_ENV === 'development') {\n    var _config$method;\n    console.log(`游깷 API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.baseURL}${config.url}`);\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Interceptor para manejar 401 (token inv치lido o expirado)\naxios.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userData');\n    delete axios.defaults.headers.common['Authorization'];\n    // Opcional: puedes mostrar un mensaje o redirigir al login\n    window.location.reload(); // Recarga la app para forzar login\n  }\n  return Promise.reject(error);\n});\nexport default axios;","map":{"version":3,"names":["axios","getApiBaseUrl","window","hostname","location","protocol","port","match","defaults","baseURL","interceptors","request","use","config","process","env","NODE_ENV","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","localStorage","removeItem","headers","common","reload"],"sources":["C:/Users/anzip/OneDrive/Documentos/Pjarvis/Code/frontend/src/config/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Configuraci칩n de API que detecta autom치ticamente el entorno\nconst getApiBaseUrl = () => {\n  // Si estamos en el navegador\n  if (typeof window !== 'undefined') {\n    const hostname = window.location.hostname;\n    const protocol = window.location.protocol;\n    const port = '5000'; // Puerto del backend\n    \n    // Si accedemos desde localhost, usar localhost para el backend\n    if (hostname === 'localhost' || hostname === '127.0.0.1') {\n      return `${protocol}//localhost:${port}`;\n    }\n    \n    // Si accedemos desde IP local, usar la misma IP para el backend\n    if (hostname.match(/^192\\.168\\.|^10\\.|^172\\./)) {\n      return `${protocol}//${hostname}:${port}`;\n    }\n    \n    // Fallback a localhost\n    return `${protocol}//localhost:${port}`;\n  }\n  \n  // Fallback para desarrollo\n  return 'https://localhost:5000';\n};\n\n// Configurar la URL base de la API\naxios.defaults.baseURL = getApiBaseUrl();\n\n// Interceptor para manejar errores de conexi칩n\naxios.interceptors.request.use(\n  config => {\n    // Log de la URL que se est치 usando (solo en desarrollo)\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`游깷 API Request: ${config.method?.toUpperCase()} ${config.baseURL}${config.url}`);\n    }\n    return config;\n  },\n  error => {\n    return Promise.reject(error);\n  }\n);\n\n// Interceptor para manejar 401 (token inv치lido o expirado)\naxios.interceptors.response.use(\n  response => response,\n  error => {\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userData');\n      delete axios.defaults.headers.common['Authorization'];\n      // Opcional: puedes mostrar un mensaje o redirigir al login\n      window.location.reload(); // Recarga la app para forzar login\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default axios; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC1B;EACA,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IACjC,MAAMC,QAAQ,GAAGD,MAAM,CAACE,QAAQ,CAACD,QAAQ;IACzC,MAAME,QAAQ,GAAGH,MAAM,CAACE,QAAQ,CAACC,QAAQ;IACzC,MAAMC,IAAI,GAAG,MAAM,CAAC,CAAC;;IAErB;IACA,IAAIH,QAAQ,KAAK,WAAW,IAAIA,QAAQ,KAAK,WAAW,EAAE;MACxD,OAAO,GAAGE,QAAQ,eAAeC,IAAI,EAAE;IACzC;;IAEA;IACA,IAAIH,QAAQ,CAACI,KAAK,CAAC,0BAA0B,CAAC,EAAE;MAC9C,OAAO,GAAGF,QAAQ,KAAKF,QAAQ,IAAIG,IAAI,EAAE;IAC3C;;IAEA;IACA,OAAO,GAAGD,QAAQ,eAAeC,IAAI,EAAE;EACzC;;EAEA;EACA,OAAO,wBAAwB;AACjC,CAAC;;AAED;AACAN,KAAK,CAACQ,QAAQ,CAACC,OAAO,GAAGR,aAAa,CAAC,CAAC;;AAExC;AACAD,KAAK,CAACU,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BC,MAAM,IAAI;EACR;EACA,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAAA,IAAAC,cAAA;IAC1CC,OAAO,CAACC,GAAG,CAAC,oBAAAF,cAAA,GAAmBJ,MAAM,CAACO,MAAM,cAAAH,cAAA,uBAAbA,cAAA,CAAeI,WAAW,CAAC,CAAC,IAAIR,MAAM,CAACJ,OAAO,GAAGI,MAAM,CAACS,GAAG,EAAE,CAAC;EAC/F;EACA,OAAOT,MAAM;AACf,CAAC,EACDU,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAvB,KAAK,CAACU,YAAY,CAACgB,QAAQ,CAACd,GAAG,CAC7Bc,QAAQ,IAAIA,QAAQ,EACpBH,KAAK,IAAI;EACP,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnDC,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC;IACpCD,YAAY,CAACC,UAAU,CAAC,UAAU,CAAC;IACnC,OAAO7B,KAAK,CAACQ,QAAQ,CAACsB,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;IACrD;IACA7B,MAAM,CAACE,QAAQ,CAAC4B,MAAM,CAAC,CAAC,CAAC,CAAC;EAC5B;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAevB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}